import{_ as i,c as a,a2 as l,o as t}from"./chunks/framework.CDk703ml.js";const e="/mianshi/assets/pm-flow.Cpv4YX4E.jpeg",h="/mianshi/assets/pm-kanban.Bw3bj4H5.png",n="/mianshi/assets/flow-chart.DzuLHZeH.png",g=JSON.parse('{"title":"前端 Leader 面试","description":"","frontmatter":{},"headers":[],"relativePath":"docs/third-exam/leader-test.md","filePath":"docs/third-exam/leader-test.md"}'),p={name:"docs/third-exam/leader-test.md"};function r(k,s,d,o,E,u){return t(),a("div",null,s[0]||(s[0]=[l('<h1 id="前端-leader-面试" tabindex="-1">前端 Leader 面试 <a class="header-anchor" href="#前端-leader-面试" aria-label="Permalink to &quot;前端 Leader 面试&quot;">​</a></h1><p>二面结束以后，前端团队 Leader 面试，不再关注技术细节，更关注项目组织和设计能力。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如有疑问，可免费 <a href="/mianshi/docs/services/group.html">加群</a> 讨论咨询，也可参与 <a href="/mianshi/docs/services/1v1.html">1v1 面试咨询服务</a>， 专业、系统、高效、全流程 准备前端面试</p></div><h2 id="浏览器从输入-url-到显示网页的全过程" tabindex="-1">浏览器从输入 url 到显示网页的全过程 <a class="header-anchor" href="#浏览器从输入-url-到显示网页的全过程" aria-label="Permalink to &quot;浏览器从输入 url 到显示网页的全过程&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这个问题在任何面试环节都有可能被考察，要提前准备。</p></div><p>这个问题的答案内容比较多，回答的时候不一定要答的多细致，但一定不要错过关键步骤。</p><p>关键步骤如下</p><details class="details custom-block"><summary>Details</summary><ul><li>DNS 解析出 IP 地址</li><li>建立 TCP 连接</li><li>客户端发出 HTTP 请求</li><li>服务端响应 HTTP 请求</li><li>浏览器解析 HTML CSS</li><li>渲染 DOM</li><li>执行 JS 代码，可能会 ajax 加载内容，再次渲染 DOM</li><li>加载媒体资源</li><li>浏览器缓存机制</li></ul></details><p>参考资料</p><details class="details custom-block"><summary>Details</summary><ul><li><a href="https://juejin.cn/post/6905931622374342670" target="_blank" rel="noreferrer">https://juejin.cn/post/6905931622374342670</a></li><li><a href="https://zhuanlan.zhihu.com/p/133906695" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/133906695</a></li><li><a href="https://juejin.cn/post/6844904194801926157" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904194801926157</a></li></ul></details><h2 id="从-0-搭建一个前端项目-需要考虑哪些方面" tabindex="-1">从 0 搭建一个前端项目，需要考虑哪些方面 <a class="header-anchor" href="#从-0-搭建一个前端项目-需要考虑哪些方面" aria-label="Permalink to &quot;从 0 搭建一个前端项目，需要考虑哪些方面&quot;">​</a></h2><p>现在创建一个 Vue React 一般都是拿脚手架 cli 一键生成项目，这是最基础的。</p><p>在实际工作中还需要考虑更多的内容。参考答案如下</p><details class="details custom-block"><summary>Details</summary><ul><li>代码仓库，发布到哪个 npm 仓库（如有需要）</li><li>技术选型 Vue React 等</li><li>代码目录规范</li><li>打包构建 webpack 等，做打包优化</li><li>eslint prettier commit-lint</li><li>husky pre-commit</li><li>单元测试 + 集成测试</li><li>CI/CD 流程，自动测试，自动发布测试环境，自动部署</li><li>开发环境，预发布环境</li><li>开发文档，研发规范</li></ul></details><h2 id="如何实现-ajax-并发请求控制" tabindex="-1">如何实现 ajax 并发请求控制？ <a class="header-anchor" href="#如何实现-ajax-并发请求控制" aria-label="Permalink to &quot;如何实现 ajax 并发请求控制？&quot;">​</a></h2><p>现有 30 个异步请求需要发送，但由于某些原因，我们必须将同一时刻并发请求数量控制在 5 个以内，同时还要尽可能快速的拿到响应结果。应该怎么做？</p><p>解题思路</p><details class="details custom-block"><summary>Details</summary><ul><li>Promise.all 是需要固定数量的，并不适用这个题目的场景</li><li>可使用 Promise + 递归调用来实现，一个请求完成后继续下一个</li></ul></details><p>参考资料</p><details class="details custom-block"><summary>Details</summary><ul><li><a href="https://juejin.cn/post/6916317088521027598" target="_blank" rel="noreferrer">https://juejin.cn/post/6916317088521027598</a></li><li><a href="https://juejin.cn/post/7004257642130472996" target="_blank" rel="noreferrer">https://juejin.cn/post/7004257642130472996</a></li></ul></details><p>PS. 在一般的 web 项目中用不到这个需求，因为浏览器会自带并发请求数量的控制</p><details class="details custom-block"><summary>Details</summary><ul><li><a href="https://juejin.cn/post/7135687874250768398" target="_blank" rel="noreferrer">https://juejin.cn/post/7135687874250768398</a></li><li><a href="https://blog.csdn.net/qq_56392992/article/details/135631680" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_56392992/article/details/135631680</a></li></ul></details><h2 id="react-和-vue-有什么区别-更擅长哪一个" tabindex="-1">React 和 Vue 有什么区别？更擅长哪一个？ <a class="header-anchor" href="#react-和-vue-有什么区别-更擅长哪一个" aria-label="Permalink to &quot;React 和 Vue 有什么区别？更擅长哪一个？&quot;">​</a></h2><p>主要的区别</p><details class="details custom-block"><summary>Details</summary><ul><li>Vue 默认使用 Vue template 模板语法（也支持 JSX）；React 默认使用 JSX 语法；</li><li>Vue 对初学者更友好，因为它提供了更多语法糖；而 React 需要良好的 JS 基础；</li><li>React 函数组件对 TS 的支持更加友好，因为它本身就是个 TS 函数；Vue 的 setup script 是它的自定义语法；</li><li>React 使用 Hooks ，有调用顺序、闭包陷阱等心智负担；Vue3 使用 composables 组合式 API ，心智负担少；</li><li>React 使用 state ，Vue3 使用 ref ，后者一直有 <code>.value</code> 的心智负担</li><li>服务端组件方面，React 技术栈的 Next.js 和 Remix 做的更好一些；Vue 技术栈的 Nuxt.js 也在发展之中；</li></ul></details><p>参考资料</p><details class="details custom-block"><summary>Details</summary><ul><li><a href="https://juejin.cn/post/7344536653463207973" target="_blank" rel="noreferrer">https://juejin.cn/post/7344536653463207973</a></li><li><a href="https://juejin.cn/post/7347300843001462793" target="_blank" rel="noreferrer">https://juejin.cn/post/7347300843001462793</a></li></ul></details><p>这两个框架/lib 虽然有些区别，但在国内的实际工作中使用都没问题，擅长哪个就用哪个。</p><p>但，你如果两个都熟悉，能让你增加很多面试机会，React 和 Vue 的都可以去面试。</p><h2 id="如何做好技术选型" tabindex="-1">如何做好技术选型？ <a class="header-anchor" href="#如何做好技术选型" aria-label="Permalink to &quot;如何做好技术选型？&quot;">​</a></h2><p>当在工作中选择一个 语言/框架/工具 时，需要考虑什么？</p><p>参考答案</p><details class="details custom-block"><summary>Details</summary><ul><li>社区热门程度，搜索引擎和 StackOverflow 上能搜出多少相关资料？</li><li>创办时间和发展时间，不要用太新的技术，首先要求稳</li><li>看使用人数，参考 GitHub star 数量和 npm 下载量</li><li>看社区生态的完善程度，第三方的 UI 、组件、插件等，都是否完善</li><li>团队成员的学习成本 —— 这一点很重要，很多人会忽略</li></ul></details><p>另，回答这个问题的时候，尽量举一个你实际工作中的例子，会更有说服力。</p><h2 id="如何理解技术方案设计-是否做过技术方案设计" tabindex="-1">如何理解技术方案设计？是否做过技术方案设计？ <a class="header-anchor" href="#如何理解技术方案设计-是否做过技术方案设计" aria-label="Permalink to &quot;如何理解技术方案设计？是否做过技术方案设计？&quot;">​</a></h2><p>所谓技术方案设计，就是把你要开发的内容，先写个文档或 PPT 说明一下自己要怎么开发，并和团队成员讨论一下。</p><p>如果就是简单的功能或 bug ，10 几分钟就能搞定的，那不用技术方案设计。但复杂的工作，技术方案设计是很有必要的。因为</p><details class="details custom-block"><summary>Details</summary><ul><li>如果你真的成竹在胸，觉得它很简单，那你写个技术方案设计的文档应该也花不了多少时间，可能 1h 就写完了，项目不会因此而延期的。</li><li>如果你憋半天写不出一篇技术方案设计文档，那你开发的时候就能很顺利？不可能的。它正好能验证你是不是眼高手低。</li><li>技术方案评审，多人参加，会更容发现一些：功能重复、性能瓶颈、安全隐患等。</li></ul></details><p>技术方案设计一般包含如下部分</p><details class="details custom-block"><summary>Details</summary><ul><li>state 数据结构，如会存储在 vuex 或 redux 中</li><li>组件 UI 结构，嵌套关系，属性如何传递</li><li>会用到哪些服务端的 API ，哪些是现有的，哪些需要新开发</li><li>如有复杂逻辑，说明计算过程，时间复杂度</li><li>是否有性能隐患？</li><li>是否有安全隐患？</li></ul></details><h2 id="线上出了严重-bug-你该如何解决" tabindex="-1">线上出了严重 bug 你该如何解决？ <a class="header-anchor" href="#线上出了严重-bug-你该如何解决" aria-label="Permalink to &quot;线上出了严重 bug 你该如何解决？&quot;">​</a></h2><p>正确的处理步骤</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>回滚</strong>，及时止损 —— 这一步最重要，很多人不知道这一步！！！</li><li>通知项目组成员，看谁最近有过上线？—— 线上 bug 一般是最近一次上线导致的</li><li>在本地或测试环境浮现 bug，查找原因</li><li>修复，测试，重新上线</li><li>开<strong>复盘</strong>会议，以后如何规避此类问题 —— 复盘会议，也是很多人不知道的</li></ul></details><p>另，如果你项目没有监控报警的话，最好加一个，这样线上有 bug 会及时报警。</p><h2 id="你参与的项目-研发流程是怎样的" tabindex="-1">你参与的项目，研发流程是怎样的？ <a class="header-anchor" href="#你参与的项目-研发流程是怎样的" aria-label="Permalink to &quot;你参与的项目，研发流程是怎样的？&quot;">​</a></h2><p>如果是新项目研发，会采用传统的瀑布流形式</p><details class="details custom-block"><summary>Details</summary><ul><li>项目立项</li><li>确认需求，编写需求文档，UI 设计图</li><li>制定技术方案</li><li>制定研发计划</li><li>开发</li><li>多端联调</li><li>测试，修复 bug</li><li>上线</li><li>总结</li></ul><p><img src="'+e+'" alt=""></p></details><p>如果是已有项目的维护和升级，一般采用敏捷开发方式</p><details class="details custom-block"><summary>Details</summary><ul><li>项目有一个统一的任务列表，分优先级排列</li><li>开发人员领取一个任务，负责设计、开发、提测等流程，每一步都会在任务看板中显示步骤和进展</li><li>待这个任务上线以后，再领取下一个任务</li></ul><p><img src="'+h+'" alt=""></p></details><h2 id="你如何保障代码质量" tabindex="-1">你如何保障代码质量？ <a class="header-anchor" href="#你如何保障代码质量" aria-label="Permalink to &quot;你如何保障代码质量？&quot;">​</a></h2><p>代码质量和系统稳定性有直接关系，保障代码质量也是高级程序员的必备技能。</p><p>参考答案</p><details class="details custom-block"><summary>Details</summary><ul><li>配置统一的 eslint 和 prettier 规则，规范代码格式</li><li>每次代码合并，都进行 code review ，外加每周一次团队 code review</li><li>编写单元测试，提交 commit 时自动触发单元测试</li><li>使用 Sentry 等平台进行线上错误报警，并及时修复问题</li></ul></details><h2 id="是否写过单元测试和-e2e-测试" tabindex="-1">是否写过单元测试和 e2e 测试？ <a class="header-anchor" href="#是否写过单元测试和-e2e-测试" aria-label="Permalink to &quot;是否写过单元测试和 e2e 测试？&quot;">​</a></h2><p>单元测试，是针对某个小型单元（组件，函数），常见的工具 Jest Vitest</p><p>e2e 端到端测试，是针对一个系统 UI 和行为进行测试，常见的工具 Cypress Puppeteer</p><p>参考资料</p><details class="details custom-block"><summary>Details</summary><ul><li><a href="https://juejin.cn/post/7123869512327233550" target="_blank" rel="noreferrer">https://juejin.cn/post/7123869512327233550</a></li><li><a href="https://juejin.cn/post/6896890664726822920" target="_blank" rel="noreferrer">https://juejin.cn/post/6896890664726822920</a></li></ul></details><h2 id="自定义-dsl-流程图" tabindex="-1">自定义 DSL 流程图 <a class="header-anchor" href="#自定义-dsl-流程图" aria-label="Permalink to &quot;自定义 DSL 流程图&quot;">​</a></h2><p>请自定义 XML 来描述这个流程图</p><p><img src="'+n+`" alt=""></p><p>参考答案</p><details class="details custom-block"><summary>Details</summary><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">start-end</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;开始&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">start-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;流程1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">judge</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;judge1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;评审&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">judge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;流程2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">start-end</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;结束&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">start-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;judge1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;judge1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Y&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;judge1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;N&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 另，每个节点还可以加上 x y 的定位信息，尺寸，边框、颜色等 --&gt;</span></span></code></pre></div></details><h2 id="最近在看什么书-或者学什么新技术吗" tabindex="-1">最近在看什么书？或者学什么新技术吗？ <a class="header-anchor" href="#最近在看什么书-或者学什么新技术吗" aria-label="Permalink to &quot;最近在看什么书？或者学什么新技术吗？&quot;">​</a></h2><p>如果你的简历写了自我评价，且在自我评价中写了“热爱技术” “持续学习”等描述，很可能会被问到这个问题。当然，你不写也不一定就不会被问到，还是提前准备好吧。</p><p>现在和前端相关的一些新技术，有如下方向</p><ul><li>Node 全栈，服务端渲染，如 Next.js 框架，这两年发展很迅速</li><li>AI 相关的产品和工具，如各种 AI 聊天、AI 写作，还有 Copilot Cursor 等 AI 工具</li></ul><p>也可以从你感兴趣的其他领域去说，只要能自圆其说即可。</p><h2 id="你的缺点是什么" tabindex="-1">你的缺点是什么？ <a class="header-anchor" href="#你的缺点是什么" aria-label="Permalink to &quot;你的缺点是什么？&quot;">​</a></h2><p>注意，这是个坑！不要傻乎乎的真把自己的缺点说出来，暴露给别人看。</p><p>正确的方式是：说缺点，也要说自己的补救措施，最终体现自己是一个爱学习、要求进步的人。</p><p>推荐的表达方式</p><details class="details custom-block"><summary>Details</summary><ul><li>我觉得自己目前在 xxx 方面还有所欠缺</li><li>但我已经开始通过 xxx 学习这方面的知识了，计划 xxx 天以后即可完成</li></ul></details>`,73)]))}const m=i(p,[["render",r]]);export{g as __pageData,m as default};
