import{_ as t,c as a,a2 as r,o as l}from"./chunks/framework.CDk703ml.js";const i="/mianshi/assets/image-20241124081207334.Cj6rihi7.png",o="/mianshi/assets/image-20250326120252517.C7aM7jfD.png",s="/mianshi/assets/asynccode.CcLmnnVk.png",y=JSON.parse('{"title":"鸿蒙应用开发","description":"","frontmatter":{},"headers":[],"relativePath":"docs/second-exam/HarmonyOS-application-development.md","filePath":"docs/second-exam/HarmonyOS-application-development.md"}'),n={name:"docs/second-exam/HarmonyOS-application-development.md"};function d(c,e,m,h,u,p){return l(),a("div",null,e[0]||(e[0]=[r('<h1 id="鸿蒙应用开发" tabindex="-1">鸿蒙应用开发 <a class="header-anchor" href="#鸿蒙应用开发" aria-label="Permalink to &quot;鸿蒙应用开发&quot;">​</a></h1><h2 id="鸿蒙中地图功能如何实现-申请流程是什么样的" tabindex="-1">鸿蒙中地图功能如何实现，申请流程是什么样的 <a class="header-anchor" href="#鸿蒙中地图功能如何实现-申请流程是什么样的" aria-label="Permalink to &quot;鸿蒙中地图功能如何实现，申请流程是什么样的&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>主要通过 集成 Map Kit 的功能来实现</li><li>Map Kit 功能很强大，比如有 <ol><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-creation-V5" target="_blank" rel="noreferrer">创建地图</a>：呈现内容包括建筑、道路、水系等。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-interaction-V5" target="_blank" rel="noreferrer">地图交互</a>：控制地图的交互手势和交互按钮。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-drawing-V5" target="_blank" rel="noreferrer">在地图上绘制</a>：添加位置标记、覆盖物以及各种形状等。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-location-services-V5" target="_blank" rel="noreferrer">位置搜索</a>：多种查询 Poi 信息的能力。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-navi-V5" target="_blank" rel="noreferrer">路径规划</a>：提供驾车、步行、骑行路径规划能力。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-static-diagram-V5" target="_blank" rel="noreferrer">静态图</a>：获取一张地图图片。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-advanced-controls-V5" target="_blank" rel="noreferrer">地图 Picker</a>：提供地点详情展示控件、地点选取控件、区划选择控件。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-petalmaps-V5" target="_blank" rel="noreferrer">通过 Petal 地图应用实现导航等能力</a>：查看位置详情、查看路径规划、发起导航、发起内容搜索。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/map-calculation-tool-V5" target="_blank" rel="noreferrer">地图计算工具</a>：华为地图涉及的 2 种坐标系及其使用区域和转换</li></ol></li><li>在编码之前需要 <ol><li>完成证书的申请和公钥指纹的一些配置</li><li>还要在 AGC 平台上开通地图服务应用</li><li>代码中使用 项目的 client_id</li><li>最后开始编码</li></ol></li></ol></details><h2 id="一多开发是如何实现的" tabindex="-1">一多开发是如何实现的 <a class="header-anchor" href="#一多开发是如何实现的" aria-label="Permalink to &quot;一多开发是如何实现的&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>一多开发是一次开发多端部署</li><li>主要分成三个核心部分 <ol><li>工程级一多</li><li>界面级一多</li><li>能力级一多</li></ol></li><li>工程级一多主要指的是使用华为鸿蒙推荐的三层架构来搭建项目，比如 <ol><li>第一层，最底层是 common-公共能力层，用于存放公共基础能力集合（如工具库、公共配置等），一般是使用 HSP 包(动态共享包)，这样它被项目中多个模块引入的话，也只会保留一个备份。</li><li>第二层，是 features-基础特性层，用于存放基础特性集合（如应用中相对独立的各个功能的 UI 及业务逻辑实现等）</li><li>顶层是，products-产品定制层，用于针对不同设备形态进行功能和特性集成</li></ol></li><li>界面级一多指的是一套代码可以适配不同尺寸、形态的设备，主要通过以下这些技术来实现 <ol><li>自适应布局 等比拉伸缩放等等相关技术</li><li>响应式布局 通过断点、媒体查询、栅格布局来实现</li></ol></li><li>能力级一多主要指的是不同硬件设备支持能力不一样，如蓝牙、摄像头、传感器等等。这些主要通过判断当前设置是否支持该能力来决定是否调用相关的 api 功能。如利用编辑器工具的智能提示、和代码中使用的 caniuse 或者 try-catch 进行判断使用。</li></ol></details><h2 id="三层架构" tabindex="-1">三层架构 <a class="header-anchor" href="#三层架构" aria-label="Permalink to &quot;三层架构&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>第一层，最底层是 common-公共能力层，用于存放公共基础能力集合（如工具库、公共配置等），一般是使用 HSP 包(动态共享包)，这样它被项目中多个模块引入的话，也只会保留一个备份。</li><li>第二层，是 features-基础特性层，用于存放基础特性集合（如应用中相对独立的各个功能的 UI 及业务逻辑实现等）</li><li>顶层是，products-产品定制层，用于针对不同设备形态进行功能和特性集成</li></ol></details><h2 id="录音有做过吗-avrecoder-有几种状态" tabindex="-1">录音有做过吗？avrecoder 有几种状态？ <a class="header-anchor" href="#录音有做过吗-avrecoder-有几种状态" aria-label="Permalink to &quot;录音有做过吗？avrecoder 有几种状态？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>录音可以通过 AVRecorder 和 AudioCapturer 来实现。两者区别主要在支持录制声音的格式不同和控制录音文件的细小粒度不同上。AVRecorder 会简单一些，AudioCapturer 会复杂一些-还可以搭配 ai 语音功能使用</p><p>AVRecorder 主要有以下这些状态：</p><p>类型说明&#39;idle&#39;闲置状态。&#39;prepared&#39;参数设置完成&#39;started&#39;正在录制。&#39;paused&#39;录制暂停。&#39;stopped&#39;录制停止。&#39;released&#39;录制资源释放。&#39;error&#39;错误状态。</p><p><img src="'+i+'" alt="image-20250326151004432"></p></details><h2 id="avrecord-的录音步骤" tabindex="-1">AVRecord 的录音步骤 <a class="header-anchor" href="#avrecord-的录音步骤" aria-label="Permalink to &quot;AVRecord 的录音步骤&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>创建 AVRecorder 实例，实例创建完成进入 idle 状态。</li><li>设置业务需要的监听事件，监听状态变化及错误上报。</li><li>配置音频录制参数，调用 prepare()接口，此时进入 prepared 状态。</li><li>开始录制，调用 start()接口，此时进入 started 状态。</li></ol></details><h2 id="图片上传有做过吗-图片处理-旋转、缩放、图片保存有做过吗" tabindex="-1">图片上传有做过吗？图片处理，旋转、缩放、图片保存有做过吗？ <a class="header-anchor" href="#图片上传有做过吗-图片处理-旋转、缩放、图片保存有做过吗" aria-label="Permalink to &quot;图片上传有做过吗？图片处理，旋转、缩放、图片保存有做过吗？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>做过相册图片的上传（如果是沙箱内的图片只需要 1 个步骤即可，直接上传），流程主要有 3 个步骤，基于 photoAccessHelper 、CoreFileKit、NetworkKit 来实现的</p><ol><li>photoAccessHelper 用来实现选择要上传的相册的图片</li><li>CoreFileKit 将相册图片拷贝到沙箱目录</li><li>NetworkKit 负责将沙箱目录内的图片上传到服务器上</li></ol><p>图片处理，旋转、缩放、图片保存主要基于 Image Kit 来实现。它提供有</p><ul><li>图片解码</li><li>指将所支持格式的存档图片解码成统一的 PixelMap，以便在应用或系统中进行图片显示或图片处理。</li><li>PixelMap</li><li>指图片解码后无压缩的位图，用于图片显示或图片处理。</li><li>图片处理</li><li>指对 PixelMap 进行相关的操作，如旋转、缩放、设置透明度、获取图片信息、读写像素数据等。</li><li>图片编码</li><li>指将 PixelMap 编码成不同格式的存档图片，用于后续处理，如保存、传输等。</li></ul><p>其中压缩图片是通过 一个 ImageKit 的 packing 函数，传入压缩比例(0-100)来是实现的。值越小体积越小</p></details><h2 id="视频有做过吗" tabindex="-1">视频有做过吗？ <a class="header-anchor" href="#视频有做过吗" aria-label="Permalink to &quot;视频有做过吗？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>如果是普通的视频播放直接使用 Video 组件来播放即可。功能相对弱一些</li><li>如果是对视频播放进行神帝的一些处理，如流媒体、本地资源解析、媒体资源解封装、视频解码和自定义渲染的这些功能，可以使用 AVPlayer 来实现。</li><li>如果类似做一个编辑视频的软件，那么就需要使用到对应的 CAPI 接口来实现了(调用底层 c++的能力)</li></ol></details><h2 id="同事发给你代码-你怎么知道它的-bundlename" tabindex="-1">同事发给你代码，你怎么知道它的 bundlename <a class="header-anchor" href="#同事发给你代码-你怎么知道它的-bundlename" aria-label="Permalink to &quot;同事发给你代码，你怎么知道它的 bundlename&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>一般直接看 AppScope 中的字段就行</p></details><h2 id="鸿蒙如何和网页端通信" tabindex="-1">鸿蒙如何和网页端通信？ <a class="header-anchor" href="#鸿蒙如何和网页端通信" aria-label="Permalink to &quot;鸿蒙如何和网页端通信？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>如果是应用的话，使用 web 组件和对应的 controller 的一些接口，如 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#runjavascript" target="_blank" rel="noreferrer">runJavaScript()</a>和<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#registerjavascriptproxy" target="_blank" rel="noreferrer">registerJavaScriptProxy</a></li><li>如果是元服务的话，使用 AtomicServiceWeb 来实现，因为 2025 年 1 月 22 日后不支持使用 web。还有 AtomicServiceWeb 没有了 web 中的如 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#runjavascript" target="_blank" rel="noreferrer">runJavaScript()</a>和<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#registerjavascriptproxy" target="_blank" rel="noreferrer">registerJavaScriptProxy</a>接口，但是它一样可以通过页面的 url 进行参数的传递和鸿蒙端提供了 js sdk，也可以很方便的让 h5 端调用鸿蒙端的功能</li></ol></details><h2 id="跨域是怎么处理的" tabindex="-1">跨域是怎么处理的？ <a class="header-anchor" href="#跨域是怎么处理的" aria-label="Permalink to &quot;跨域是怎么处理的？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><blockquote><p>跨域存在于不同源的浏览器和服务器的网络通信中，因为鸿蒙端嵌套了 web 组件，理解成就是一个浏览器，因此也会存在跨域</p></blockquote><p>为了提高安全性，ArkWeb 内核不允许 file 协议或者 resource 协议访问 URL 上下文中来自跨域的请求。因此，在使用 Web 组件加载本地离线</p><p>资源的时候，Web 组件会拦截 file 协议和 resource 协议的跨域访问。</p><p>主要有两种解决方案</p><ol><li>将本地资源替换成网络资源，也就是 file 协议访问的是本地的资源，我们将本地资源放在网络上，通过 http 请求的方式来加载，然后在后端设置 cors 跨域即可。同时，开发者需利用 Web 组件的<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-web-V5#oninterceptrequest9" target="_blank" rel="noreferrer">onInterceptRequest</a>方法，对本地资源进行拦截和相应的替换</li><li>通过<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#setpathallowinguniversalaccess12" target="_blank" rel="noreferrer">setPathAllowingUniversalAccess 白名单</a>设置一个路径列表。当使用 file 协议访问该列表中的资源时，允许进行跨域访问本地文件</li></ol></details><h2 id="录音过程中息屏怎么处理" tabindex="-1">录音过程中息屏怎么处理？ <a class="header-anchor" href="#录音过程中息屏怎么处理" aria-label="Permalink to &quot;录音过程中息屏怎么处理？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>可以通过申请<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/continuous-task-V5" target="_blank" rel="noreferrer">长时任务</a>，实现在后台长时间运行。长时任务支持的类型，包含数据传输、音视频播放、录制、定位导航、蓝牙相关、多设备互联、WLAN 相关、音视频通话和计算任务</p><p>开发步骤如下：</p><ol><li>需要申请 ohos.permission.KEEP_BACKGROUND_RUNNING 权限</li><li>声明后台模式类型（录音等）</li><li>通过 @ohos.resourceschedule.backgroundTaskManager 和@ohos.app.ability.wantAgent 进行编码处理</li></ol></details><h2 id="有做过华为支付吗" tabindex="-1">有做过华为支付吗？ <a class="header-anchor" href="#有做过华为支付吗" aria-label="Permalink to &quot;有做过华为支付吗？&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>需要企业资质、需要在 AGC 平台上开通服务。</p><p><img src="'+o+'" alt="image-20250326120252517"></p><ol><li>商户客户端请求商户服务器创建商品订单。</li><li>商户服务器按照商户模型调用 Payment Kit 服务端<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/payment-prepay-V5" target="_blank" rel="noreferrer">直连商户预下单</a>或<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/payment-agent-prepay-V5" target="_blank" rel="noreferrer">平台类商户/服务商预下单</a>接口。</li><li>华为支付服务端返回预支付 ID（prepayId）。</li><li>商户服务端组建订单信息参数<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/payment-model-V5#section159202591414" target="_blank" rel="noreferrer">orderStr</a>返回给商户客户端。</li><li>商户客户端调用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/payment-paymentservice-V5#section192192415554" target="_blank" rel="noreferrer">requestPayment</a>接口调起 Payment Kit 支付收银台。</li><li>Payment Kit 客户端展示收银台。</li><li>用户通过收银台完成支付，Payment Kit 客户端会收到支付结果信息并请求 Payment Kit 服务端处理支付。</li><li>Payment Kit 服务端成功受理支付订单并异步处理支付。</li><li>Payment Kit 服务端将支付结果返回给 Payment Kit 客户端。</li><li>Payment Kit 客户端展示支付结果页。</li><li>用户关闭支付结果页后 Payment Kit 客户端会返回支付状态给商户客户端。</li><li>支付处理完成后，Payment Kit 服务端会调用回调接口返回支付结果信息给商户服务端。</li><li>商户服务端收到支付结果回调响应后，使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/payment-rest-overview-V5#section17670192215175" target="_blank" rel="noreferrer">SM2 验签方式</a>对支付结果进行验签。</li></ol></details><h2 id="说一下多线程" tabindex="-1">说一下多线程 <a class="header-anchor" href="#说一下多线程" aria-label="Permalink to &quot;说一下多线程&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p><a href="https://juejin.cn/post/7435302345448259622" target="_blank" rel="noreferrer">参考</a></p><p><img src="'+s+`" alt="img"></p></details><h2 id="harmonyos-中的生命周期" tabindex="-1">HarmonyOS 中的生命周期 <a class="header-anchor" href="#harmonyos-中的生命周期" aria-label="Permalink to &quot;HarmonyOS 中的生命周期&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>页面生命周期</p><ol><li>onpageshow：页面每次显示时触发，包括路由过程、应用进入前台等场景。例如，用户从后台切换应用到前台，或者通过路由跳转到该页面时，此方法会被调用</li><li>onpagehide：页面每次隐藏时触发，包括路由过程、应用进入后台等场景。比如用户按下主页键将应用切换到后台，或者通过路由跳转到其他页面时，该页面的 onpagehide 方法会被执行</li><li>onbackpress：当用户点击返回按钮时触发。如果返回值为 true，表示页面自己处理返回逻辑，不进行页面路由；返回 false 则表示使用默认的路由返回逻辑，不设置返回值时按照 false 处理</li><li>abouttoappear：组件即将出现时回调该接口，具体时机为在创建自定义组件的新实例后，在执行其 build () 函数之前执行。在该函数中可以修改变量，更改将在后续执行 build () 函数中生效</li><li>abouttodisappear：在自定义组件析构销毁之前执行。在此函数中不允许改变状态变量，特别是 @link 变量的修改可能会导致应用程序行为不稳定</li></ol><p>组件生命周期独有的</p><ol><li>abouttoappear：组件即将出现时回调该接口，具体时机为在创建自定义组件的新实例后，在执行其 build () 函数之前执行。在该函数中可以修改变量，更改将在后续执行 build () 函数中生效</li><li>abouttodisappear：在自定义组件析构销毁之前执行。在此函数中不允许改变状态变量，特别是 @link 变量的修改可能会导致应用程序行为不稳定</li></ol><p>UIAbility 生命周期</p><ol><li>create 状态：在应用加载过程中，UIAbility 实例创建完成时触发，系统会调用 oncreate () 回调。可以在该回调中进行页面初始化操作，例如变量定义、资源加载等，用于后续的 UI 展示</li><li>windowstagecreate 状态：UIAbility 实例创建完成之后，在进入 foreground 之前，系统会创建一个 windowstage。windowstage 创建完成后会进入 onwindowstagecreate () 回调，可以在该回调中设置 UI 加载、设置 windowstage 的事件订阅，如获焦 / 失焦、可见 / 不可见等事件</li><li>foreground 状态：当 UIAbility 实例切换至前台时触发，对应于 onforeground () 回调。在 onforeground () 中可以申请系统需要的资源，或者重新申请在 onbackground 中释放的资源.</li><li>background 状态：当 UIAbility 实例切换至后台时触发，对应于 onbackground () 回调。在该回调中可以释放 UI 界面不可见时无用的资源，或者在此回调中执行较为耗时的操作，例如状态保存等.</li><li>windowstagedestroy 状态：在 UIAbility 实例销毁之前，会先进入 onwindowstagedestroy 回调，可以在该回调中释放 UI 界面资源</li><li>destroy 状态：在 UIAbility 实例销毁时触发，可以在 ondestroy () 回调中进行系统资源的释放、数据的保存等操作</li></ol></details><h2 id="用-entry-和-navigation-装饰的页面有哪些区别" tabindex="-1">用 Entry 和 Navigation 装饰的页面有哪些区别 <a class="header-anchor" href="#用-entry-和-navigation-装饰的页面有哪些区别" aria-label="Permalink to &quot;用 Entry 和 Navigation 装饰的页面有哪些区别&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>@Entry 装饰的页面是应用的入口页面，通常用于展示应用的初始界面，而 Navigation 组件是一个导航容器，挂载在单个页面下，支持跨模块的动态路由。</li><li>@Entry 页面具有通用的生命周期方法，而 Navigation 组件里的页面不执行 onPageShow、onPageHide 等生命周期回调。</li></ol></details><h2 id="harmonyos-中里面有几种包-分别有什么作用" tabindex="-1">HarmonyOS 中里面有几种包，分别有什么作用 <a class="header-anchor" href="#harmonyos-中里面有几种包-分别有什么作用" aria-label="Permalink to &quot;HarmonyOS 中里面有几种包，分别有什么作用&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>HarmonyOS 中有三种类型的包：HAP（HarmonyOS Ability Package）、HAR（Harmony Archive）、HSP（Harmony Shared Package）。</p><ol><li>HAP 是应用安装和运行的基本单元，分为 entry 和 feature 两种类型。</li><li>HAR 是静态共享包，用于代码和资源的共享。</li><li>HSP 是动态共享包，用于应用内共享代码和资源。</li></ol></details><h2 id="简单介绍一下-stage-模型" tabindex="-1">简单介绍一下 Stage 模型 <a class="header-anchor" href="#简单介绍一下-stage-模型" aria-label="Permalink to &quot;简单介绍一下 Stage 模型&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>Stage 模型是 HarmonyOS 应用开发的基础架构，它提供了面向对象的开发方式，规范化了进程创建的方式，并提供组件化开发机制。</li><li>Stage 模型的组件天生具备分布式迁移和协同的能力，支持多设备形态和多窗口形态，重新定义了应用能力边界。</li></ol></details><h2 id="harmonyos-中的动画" tabindex="-1">HarmonyOS 中的动画 <a class="header-anchor" href="#harmonyos-中的动画" aria-label="Permalink to &quot;HarmonyOS 中的动画&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>HarmonyOS 提供了多种动画能力，包括属性动画、显式动画、转场动画、路径动画和粒子动画。</p></details><h2 id="如何进行路由页面传参" tabindex="-1">如何进行路由页面传参 <a class="header-anchor" href="#如何进行路由页面传参" aria-label="Permalink to &quot;如何进行路由页面传参&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>在 HarmonyOS 中，可以通过 router.pushUrl 方法跳转到目标页面，并携带参数。在进入被分享页面时，通过 router.getParams()来获取</p><p>传递的数据。此外，还可以使用 LocalStorage 等在页面间共享状态。</p></details><h2 id="arkts-和-ts-的区别有哪些区别" tabindex="-1">ArkTS 和 TS 的区别有哪些区别 <a class="header-anchor" href="#arkts-和-ts-的区别有哪些区别" aria-label="Permalink to &quot;ArkTS 和 TS 的区别有哪些区别&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>ArkTS 是 HarmonyOS 优选的主力应用开发语言，它保持了 TypeScript 的基本风格，同时通过规范定义强化开发期静态检查和分析，提升程序执行稳定性和性能。ArkTS 与 TS 的主要区别在于 ArkTS 是静态类型的，而 TS 支持动态类型。ArkTS 在编译时进行类型检查，有助于在代码运行前发现和修复错误。</p><ol><li><strong><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/typescript-to-arkts-migration-guide-V5#%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">强制使用静态类型</a></strong> <strong>ArkTS 中禁止使用 any 类型。</strong></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/typescript-to-arkts-migration-guide-V5#%E7%A6%81%E6%AD%A2%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%98%E6%9B%B4%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80" target="_blank" rel="noreferrer">禁止在运行时变更对象布局</a></li></ol><ul><li>向对象中添加新的属性或方法。</li><li>从对象中删除已有的属性或方法。</li><li>将任意类型的值赋值给对象属性。</li></ul><ol start="3"><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/typescript-to-arkts-migration-guide-V5#%E9%99%90%E5%88%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%AF%AD%E4%B9%89" target="_blank" rel="noreferrer">限制运算符的语义</a></li></ol><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 一元运算符\`+\`只能作用于数值类型：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let t = +42;   // 合法运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let s = +&#39;42&#39;; // 编译时错误</span></span></code></pre></div></details><h2 id="常见装饰器" tabindex="-1">常见装饰器 <a class="header-anchor" href="#常见装饰器" aria-label="Permalink to &quot;常见装饰器&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ul><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-state-V5" target="_blank" rel="noreferrer">@State</a>：@State 装饰的变量拥有其所属组件的状态，可以作为其子组件单向和双向同步的数据源。当其数值改变时，会引起相关组件的渲染刷新。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-prop-V5" target="_blank" rel="noreferrer">@Prop</a>：@Prop 装饰的变量可以和父组件建立单向同步关系，@Prop 装饰的变量是可变的，但修改不会同步回父组件。深拷贝。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-link-V5" target="_blank" rel="noreferrer">@Link</a>：@Link 装饰的变量可以和父组件建立双向同步关系，子组件中@Link 装饰变量的修改会同步给父组件中建立双向数据绑定的数据源，父组件的更新也会同步给@Link 装饰的变量。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-provide-and-consume-V5" target="_blank" rel="noreferrer">@Provide/@Consume</a>：@Provide/@Consume 装饰的变量用于跨组件层级（多层组件）同步状态变量，可以不需要通过参数命名机制传递，通过 alias（别名）或者属性名绑定。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-observed-and-objectlink-V5" target="_blank" rel="noreferrer">@Observed</a>：@Observed 装饰 class，需要观察多层嵌套场景的 class 需要被@Observed 装饰。单独使用@Observed 没有任何作用，需要和@ObjectLink、@Prop 联用。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-observed-and-objectlink-V5" target="_blank" rel="noreferrer">@ObjectLink</a>：@ObjectLink 装饰的变量接收@Observed 装饰的 class 的实例，应用于观察多层嵌套场景，和父组件的数据源构建双向同步。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-appstorage-V5" target="_blank" rel="noreferrer">AppStorage</a>是应用程序中的一个特殊的单例<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-localstorage-V5" target="_blank" rel="noreferrer">LocalStorage</a>对象，是应用级的数据库，和进程绑定，通过<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-appstorage-V5#storageprop" target="_blank" rel="noreferrer">@StorageProp</a>和<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-appstorage-V5#storagelink" target="_blank" rel="noreferrer">@StorageLink</a>装饰器可以和组件联动。</li><li>AppStorage 是应用状态的“中枢”，将需要与组件（UI）交互的数据存入 AppStorage，比如持久化数据<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-persiststorage-V5" target="_blank" rel="noreferrer">PersistentStorage</a>和环境变量<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-environment-V5" target="_blank" rel="noreferrer">Environment</a>。UI 再通过 AppStorage 提供的装饰器或者 API 接口，访问这些数据。</li><li>框架还提供了 LocalStorage，AppStorage 是 LocalStorage 特殊的单例。LocalStorage 是应用程序声明的应用状态的内存“数据库”，通常用于页面级的状态共享，通过<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-localstorage-V5#localstorageprop" target="_blank" rel="noreferrer">@LocalStorageProp</a>和<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-localstorage-V5#localstoragelink" target="_blank" rel="noreferrer">@LocalStorageLink</a>装饰器可以和 UI 联动。</li></ul></details><h2 id="鸿蒙的-router-和-navigation-的对比" tabindex="-1">鸿蒙的 router 和 Navigation 的对比 <a class="header-anchor" href="#鸿蒙的-router-和-navigation-的对比" aria-label="Permalink to &quot;鸿蒙的 router 和 Navigation 的对比&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>router 最多页面栈为 32 个，Navigation 无限制</li><li>Navigation 支持一多开发，Auto 模式自适应单栏跟双栏显示</li><li>Navigation 支持获取指定页面参数</li><li>Navigation 清理指定路由</li><li>Navigation 支持路由拦截</li></ol></details><h2 id="能力对比" tabindex="-1">能力对比 <a class="header-anchor" href="#能力对比" aria-label="Permalink to &quot;能力对比&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><table tabindex="0"><thead><tr><th style="text-align:left;">业务场景</th><th style="text-align:left;">Navigation</th><th style="text-align:left;">Router</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>一多能力</strong></td><td style="text-align:left;"><strong>支持，Auto 模式自适应单栏跟双栏显示</strong></td><td style="text-align:left;"><strong>不支持</strong></td></tr><tr><td style="text-align:left;">跳转指定页面</td><td style="text-align:left;">pushPath &amp; pushDestination</td><td style="text-align:left;">pushUrl &amp; pushNameRoute</td></tr><tr><td style="text-align:left;">跳转 HSP 中页面</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">跳转 HAR 中页面</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">跳转传参</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;"><strong>获取指定页面参数</strong></td><td style="text-align:left;"><strong>支持</strong></td><td style="text-align:left;"><strong>不支持</strong></td></tr><tr><td style="text-align:left;">传参类型</td><td style="text-align:left;">传参为对象形式</td><td style="text-align:left;">传参为对象形式，对象中暂不支持方法变量</td></tr><tr><td style="text-align:left;">跳转结果回调</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">跳转单例页面</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">页面返回</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">页面返回传参</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">返回指定路由</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">页面返回弹窗</td><td style="text-align:left;">支持，通过路由拦截实现</td><td style="text-align:left;">showAlertBeforeBackPage</td></tr><tr><td style="text-align:left;">路由替换</td><td style="text-align:left;">replacePath &amp; replacePathByName</td><td style="text-align:left;">replaceUrl &amp; replaceNameRoute</td></tr><tr><td style="text-align:left;">路由栈清理</td><td style="text-align:left;">clear</td><td style="text-align:left;">clear</td></tr><tr><td style="text-align:left;"><strong>清理指定路由</strong></td><td style="text-align:left;"><strong>removeByIndexes &amp; removeByName</strong></td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">转场动画</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">自定义转场动画</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持，动画类型受限</td></tr><tr><td style="text-align:left;">屏蔽转场动画</td><td style="text-align:left;">支持全局和单次</td><td style="text-align:left;">支持 设置 pageTransition 方法 duration 为 0</td></tr><tr><td style="text-align:left;">geometryTransition 共享元素动画</td><td style="text-align:left;">支持（NavDestination 之间共享）</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">页面生命周期监听</td><td style="text-align:left;">UIObserver.on(&#39;navDestinationUpdate&#39;)</td><td style="text-align:left;">UIObserver.on(&#39;routerPageUpdate&#39;)</td></tr><tr><td style="text-align:left;">获取页面栈对象</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;"><strong>路由拦截</strong></td><td style="text-align:left;">支持通过 setInercption 做路由拦截</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">路由栈信息查询</td><td style="text-align:left;">支持</td><td style="text-align:left;">getState() &amp; getLength()</td></tr><tr><td style="text-align:left;">路由栈 move 操作</td><td style="text-align:left;">moveToTop &amp; moveIndexToTop</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">沉浸式页面</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持，需通过 window 配置</td></tr><tr><td style="text-align:left;">设置页面标题栏（titlebar）和工具栏（toolbar）</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">模态嵌套路由</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td></tr></tbody></table></details><h2 id="页面下拉刷新和页面上拉加载" tabindex="-1">页面下拉刷新和页面上拉加载 <a class="header-anchor" href="#页面下拉刷新和页面上拉加载" aria-label="Permalink to &quot;页面下拉刷新和页面上拉加载&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>下拉刷新可以使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-refresh-V5" target="_blank" rel="noreferrer">Refresh</a>组件，它提供了 onStateChange 和 onRefreshing 事件 用来实现下拉刷新的业务</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-list-V5#onreachend" target="_blank" rel="noreferrer">List</a>、Scroll、Grid、WaterFall 等组件都提供了<strong>上拉加载更多</strong>事件，比如 List 组件的 onReachEnd 事件就是</li></ol></details><h2 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><blockquote><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/responsive-layout-V5#%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80" target="_blank" rel="noreferrer">链接</a></p></blockquote><ol><li>断点 <ol><li>在 在 UIAbility 的<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/uiability-lifecycle-V5" target="_blank" rel="noreferrer">onWindowStageCreate</a>生命周期回调中监听 窗口尺寸变化事件，获取到当前窗口大小</li><li>因为窗口大小单位是 px，需要调用 px2vp 函数转成 vp</li><li>然后存到 AppStorage 中</li><li>最后页面 使用 AppStorage 即可</li></ol></li><li>媒体查询 <ol><li>主要通过 mediaquery 结合 断点来使用</li></ol></li><li>栅格布局 <ol><li>通过 GridRow 和 GridCol 来实现</li><li>一列分成了 12 份， 结合栅格组件默认提供 xs、sm、md、lg 四个断点</li></ol></li></ol></details><h2 id="断点续传" tabindex="-1">断点续传 <a class="header-anchor" href="#断点续传" aria-label="Permalink to &quot;断点续传&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><blockquote><p>鸿蒙发送网络请求有两套方案</p><ol><li>Request ， 我们使用的 axios 就是 基于它封装的</li><li>RCP ，Remote Communication Kit（远场通信服务）是华为提供的 HTTP 发起数据请求的 NAPI 封装 目前新项目再推动它</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-scenario-V5" target="_blank" rel="noreferrer">远场通信场景</a><ol><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-getserverresources-V5" target="_blank" rel="noreferrer">获取服务器资源</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-senddatatoserver-V5" target="_blank" rel="noreferrer">发送数据到服务器</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-httpresume-V5" target="_blank" rel="noreferrer">断点续传</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-certificateverification-V5" target="_blank" rel="noreferrer">双向证书校验</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-interceptor-V5" target="_blank" rel="noreferrer">拦截器</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-validation-V5" target="_blank" rel="noreferrer">使用自定义证书校验</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-updownload-V5" target="_blank" rel="noreferrer">上传下载文件</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-settls-V5" target="_blank" rel="noreferrer">设置 TLS 版本号和加密套件</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-getserverresources-c-V5" target="_blank" rel="noreferrer">获取服务器资源 (C/C++)</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-senddatatoserver-c-V5" target="_blank" rel="noreferrer">发送数据到服务器 (C/C++)</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-httpresume-c-V5" target="_blank" rel="noreferrer">断点续传 (C/C++)</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-certificateverification-c-V5" target="_blank" rel="noreferrer">双向证书校验 (C/C++)</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-interceptor-c-V5" target="_blank" rel="noreferrer">拦截器 (C/C++)</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-validationlock-V5" target="_blank" rel="noreferrer">证书锁定</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-responsecheck-V5" target="_blank" rel="noreferrer">响应校验</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-readtimeout-V5" target="_blank" rel="noreferrer">读写超时</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-pause-resume-V5" target="_blank" rel="noreferrer">请求暂停和恢复</a></li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/remote-communication-asyncreadwrite-V5" target="_blank" rel="noreferrer">同步读写流</a></li></ol></li></ol></blockquote></details><h3 id="断点续传-https-developer-huawei-com-consumer-cn-doc-harmonyos-guides-v5-re" tabindex="-1">[断点续传](<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/re" target="_blank" rel="noreferrer">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/re</a> <a class="header-anchor" href="#断点续传-https-developer-huawei-com-consumer-cn-doc-harmonyos-guides-v5-re" aria-label="Permalink to &quot;[断点续传](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/re&quot;">​</a></h3><details class="details custom-block"><summary>Details</summary><p>mote-communication-httpresume-V5)</p><ol><li>利用了远场通信 RemoteCommunicationKit</li><li>发送网络请求，利用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/remote-communication-rcp-V5#section838945575618" target="_blank" rel="noreferrer">TransferRange</a>的 from 和 to 属性 进行截取下载内容，拼接到文件上即可</li></ol></details><h2 id="双向证书校验" tabindex="-1">双向证书校验 <a class="header-anchor" href="#双向证书校验" aria-label="Permalink to &quot;双向证书校验&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><blockquote><p>用于验证服务端和客户端之间的身份和数据完整性，确保通信的安全性。</p></blockquote><ol><li>导入远场通信模块和文件读写模块 <ol><li><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { rcp } from &#39;@kit.RemoteCommunicationKit&#39;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { fileIo } from &#39;@kit.CoreFileKit&#39;;</span></span></code></pre></div></li></ol></li><li>使用文件读写模块 读取存在客户端的证书 <ol><li><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 读取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileIo.read(file.fd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> // 存到字符串 content中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> // 将读取的数据转换为字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let content = String.fromChar</span></span></code></pre></div></li></ol></li><li>然后调用给远场通信的 configuration 方法设置到 security.certificate.content 属性中 <ol><li><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.configuration = {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      security: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        certificate: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          content: content,</span></span></code></pre></div></li></ol></li></ol></details><h2 id="项目优化" tabindex="-1">项目优化 <a class="header-anchor" href="#项目优化" aria-label="Permalink to &quot;项目优化&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ul><li><strong>图片懒加载</strong>：列表里的图片滑到可见区域再加载，减少内存占用。</li><li><strong>数据缓存</strong>：用<code>Preferences</code>或数据库缓存首页数据，下次启动先展示缓存再刷新。</li><li><strong>减少布局嵌套</strong>：用@Builder 代替自定义组件，多用线性布局，少用 flex 等弹性布局</li><li><strong>线程管理</strong>：把 JSON 解析、图片解码丢到<code>Worker</code>线程，防止主线程卡顿。</li><li><strong>内存泄漏排查</strong>：用 DevEco Studio 的 Profiler 工具，发现有个页面退出后监听器没注销，赶紧加了<code>onPageHide</code>里的释放逻辑。</li></ul></details><h2 id="foreach-和-lazyforeach" tabindex="-1">forEach 和 LazyForEach <a class="header-anchor" href="#foreach-和-lazyforeach" aria-label="Permalink to &quot;forEach 和 LazyForEach&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>forEach 会把数据全部渲染出来</li><li>LazyForEach 只会渲染可视区域</li></ol></details><h2 id="lazyforeach-如何实现更新" tabindex="-1">LazyForEach 如何实现更新 <a class="header-anchor" href="#lazyforeach-如何实现更新" aria-label="Permalink to &quot;LazyForEach 如何实现更新&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ul><li><strong>数据源绑定</strong>：<code>LazyForEach</code> 需要与实现了 <code>IDataSource</code> 接口的数据源（如 <code>LazyDataSource</code>）绑定。当数据源发生变化（增、删、改）时，框架会自动触发更新。</li><li><strong>观察者模式</strong>：数据源通过 <code>DataChangeListener</code> 通知 <code>LazyForEach</code> 数据变更。只有实际变化的项会触发局部更新，而非重新渲染整个列表。</li></ul></details><h2 id="class-和-interface-的区别" tabindex="-1">Class 和 interface 的区别 <a class="header-anchor" href="#class-和-interface-的区别" aria-label="Permalink to &quot;Class 和 interface 的区别&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li>Interface 只能定义类型，class 可以定义类型和保护功能实现</li><li>interface 可以同时继承多个接口，class 只能同时继承一个父类</li><li>工作中两个都用，比如用 class 来封装了一些工具库 avplayer、首选项、全屏-沉浸式、axios 等</li></ol></details><h2 id="avplayer-的播放步骤" tabindex="-1">AVPlayer 的播放步骤 <a class="header-anchor" href="#avplayer-的播放步骤" aria-label="Permalink to &quot;AVPlayer 的播放步骤&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ol><li><p>创建实例 createAVPlayer()，AVPlayer 初始化 idle 状态。</p></li><li><p>设置业务需要的监听事件</p><table tabindex="0"><thead><tr><th style="text-align:left;">事件类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">stateChange</td><td style="text-align:left;">必要事件，监听播放器的 state 属性改变。</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">必要事件，监听播放器的错误信息。</td></tr><tr><td style="text-align:left;">durationUpdate</td><td style="text-align:left;">用于进度条，监听进度条长度，刷新资源时长。</td></tr><tr><td style="text-align:left;">timeUpdate</td><td style="text-align:left;">用于进度条，监听进度条当前位置，刷新当前时间。</td></tr><tr><td style="text-align:left;">seekDone</td><td style="text-align:left;">响应 API 调用，监听 seek()请求完成情况。当使用 seek()跳转到指定播放位置后，如果 seek 操作成功，将上报该事件。</td></tr><tr><td style="text-align:left;">speedDone</td><td style="text-align:left;">响应 API 调用，监听 setSpeed()请求完成情况。当使用 setSpeed()设置播放倍速后，如果 setSpeed 操作成功，将上报该事件。</td></tr><tr><td style="text-align:left;">volumeChange</td><td style="text-align:left;">响应 API 调用，监听 setVolume()请求完成情况。当使用 setVolume()调节播放音量后，如果 setVolume 操作成功，将上报该事件。</td></tr><tr><td style="text-align:left;">bufferingUpdate</td><td style="text-align:left;">用于网络播放，监听网络播放缓冲信息，用于上报缓冲百分比以及缓存播放进度。</td></tr><tr><td style="text-align:left;">audioInterrupt</td><td style="text-align:left;">监听音频焦点切换信息，搭配属性 audioInterruptMode 使用。如果当前设备存在多个音频正在播放，音频焦点被切换（即播放其他媒体如通话等）时将上报该事件，应用可以及时处理。</td></tr></tbody></table></li><li><p>设置资源：设置属性 url，AVPlayer 进入 initialized 状态。</p></li><li><p>准备播放：调用 prepare()，AVPlayer 进入 prepared 状态，此时可以获取 duration，设置音量。</p></li><li><p>音频播控：播放 play()，暂停 pause()，跳转 seek()，停止 stop() 等操作。</p></li><li><p>（可选）更换资源：调用 reset()重置资源，AVPlayer 重新进入 idle 状态，允许更换资源 url。</p></li><li><p>退出播放：调用 release()销毁实例，AVPlayer 进入 released 状态，退出播放。</p></li></ol></details><h2 id="手动签名和自动签名的区别" tabindex="-1">手动签名和自动签名的区别 <a class="header-anchor" href="#手动签名和自动签名的区别" aria-label="Permalink to &quot;手动签名和自动签名的区别&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary></details><h3 id="核心区别总结" tabindex="-1"><strong>核心区别总结</strong> <a class="header-anchor" href="#核心区别总结" aria-label="Permalink to &quot;**核心区别总结**&quot;">​</a></h3><details class="details custom-block"><summary>Details</summary><table tabindex="0"><thead><tr><th><strong>对比维度</strong></th><th><strong>自动签名</strong></th><th><strong>手动签名</strong></th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>单设备调试（单真机可用）</td><td>多设备调试、断网环境调试</td></tr><tr><td><strong>签名证书管理</strong></td><td>由 DevEco Studio 自动生成签名证书并绑定当前设备 UDID</td><td>需在<strong>AGC</strong>控制台申请调试证书****、注册调试设备 UDID、配置调试 Profile</td></tr><tr><td><strong>安装限制</strong></td><td>仅允许当前绑定的设备安装</td><td>支持注册的所有调试设备安装</td></tr><tr><td><strong>权限支持</strong></td><td><strong>不支持</strong>受限开放权限（如健康服务）</td><td>支持受限权限（需通过 AGC 审核并提交场景说明）</td></tr><tr><td><strong>发布用途</strong></td><td><strong>禁止用于发布</strong></td><td>可生成与发布版本一致的签名包（需替换为正式证书）</td></tr><tr><td><strong>受限服务依赖</strong></td><td>无法使用部分依赖签名的开放能力（如 Health Kit）</td><td>支持所有开放能力</td></tr><tr><td><strong>公钥指纹管理</strong></td><td>自动生成调试指纹，需在发布前手动更新为发布指纹</td><td>需手动维护调试和发布的指纹</td></tr></tbody></table></details><h2 id="webview-的性能优化-怎么加快-webview-的响应速度" tabindex="-1">webview 的性能优化(怎么加快 webview 的响应速度) <a class="header-anchor" href="#webview-的性能优化-怎么加快-webview-的响应速度" aria-label="Permalink to &quot;webview 的性能优化(怎么加快 webview 的响应速度)&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><ul><li>可以通过<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#prepareforpageload10" target="_blank" rel="noreferrer">prepareForPageLoad()</a>来预解析或者预连接将要加载的页面</li><li>能够预测到 Web 组件将要加载的页面或者即将要跳转的页面。可以通过<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-webview-V5#prefetchpage10" target="_blank" rel="noreferrer">prefetchPage()</a>来预加载即将要加载页面</li><li>可以通过 prefetchResource()预获取将要加载页面中的 post 请求。在页面加载结束时，可以通过 clearPrefetchedResource()清除后续不再使用的预获取资源缓存</li><li>预编译生成编译缓存 可以通过 precompileJavaScript()在页面加载前提前生成脚本文件的编译缓存。</li></ul></details>`,73)]))}const f=t(n,[["render",d]]);export{y as __pageData,f as default};
